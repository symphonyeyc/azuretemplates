{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "webTierInstances": {
      "type": "int",
      "defaultValue": 2
    },
    "targetStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your storage account that the clone VHDs will be created in"
      }
    },
    "osImageVhdUri": {
      "type": "string",
      "metadata": {
        "description": "Uri of the existing VHD"
      }
    },
    "dataDisk1VhdUri": {
      "type": "string",
      "metadata": {
        "description": "Uri of the existing data disk 1 VHD"
      }
    },
    "customerName": {
      "type": "string",
      "metadata": {
        "description": "Name of the customer"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Local Admin Username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin Password"
      }
    },
    "subnetRef": {
      "type": "string",
      "metadata": {
        "description": "Subnet to belong to"
      }
    }
  },
  "variables": {
    "api-version": "2015-06-15",
    "publicIPAddressName": "[concat(parameters('customerName'),'-pip-',uniqueString(resourceGroup().id))]",
    "vmSize": "Standard_DS2_v2",
    "publicIPAddressType": "Dynamic",
    "nicName": "[concat(parameters('customerName'),'-nic')]",
    "vmName": "[concat(parameters('customerName'),'-web')]",
    "asName": "[concat(parameters('customerName'),'-as')]",
    "targetStorageContainerName": "vhds"
  },
  "resources": [
    {
      "apiVersion": "[variables('api-version')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "publicIpCopy",
        "count": "[parameters('webTierInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('api-version')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicCopy",
        "count": "[parameters('webTierInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'),copyIndex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'),copyIndex()))]"
              },
              "subnet": {
                "id": "[parameters('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('asName')]",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "[variables('api-version')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'),copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('asName'))]"
      ],
      "copy": {
        "name": "vmCopy",
        "count": "[parameters('webTierInstances')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[concat(resourceId('Microsoft.Compute/availabilitySets', variables('asName')))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'),copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('vmName'),'-osDisk',copyIndex())]",
            "osType": "Windows",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "image": {
              "uri": "[parameters('osImageVhdUri')]"
            },
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('targetStorageAccountName')), variables('api-Version')).primaryEndpoints.blob, variables('targetStorageContainerName'), '/', variables('vmName'), copyIndex(),'-osDisk.vhd')]"
            }
          },
          "dataDisks": [
            {
              "name": "[concat(variables('vmName'),'-dataDisk1',copyIndex())]",
              "image": {
                "uri": "[parameters('dataDisk1VhdUri')]"
              },
              "vhd": {
                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('targetStorageAccountName')), variables('api-Version')).primaryEndpoints.blob, variables('targetStorageContainerName'), '/', variables('vmName'), copyIndex(),'-dataDisk1.vhd')]"
              },
              "lun": 0,
              "caching": "None",
              "createOption": "FromImage"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces', variables('nicName')),copyIndex())]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('targetStorageAccountName')), variables('api-Version')).primaryEndpoints.blob)]"
          }
        }
      }
    }
  ]
}